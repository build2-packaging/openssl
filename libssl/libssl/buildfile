# file      : libssl/buildfile
# license   : Apache License 2.0; see accompanying LICENSE file

import int_libs = libcrypto%lib{crypto}

tclass = $c.target.class
tsys   = $c.target.system

linux   = ($tclass == 'linux')
bsd     = ($tclass == 'bsd')
windows = ($tclass == 'windows')

# Note that we compile ssl/record/methods/ktls_meth.c, which is conditionally
# included by out custom ktls_meth.c, if only kTLS is enabled (see
# libcrypto/downstream/openssl/configuration.h for details).
#
lib{ssl}: {h c}{** -ssl/record/methods/ktls_meth} $int_libs

lib{ssl}: ssl/record/methods/c{ktls_meth}: include = adhoc

libs{ssl}: file{libssl.ld}: include = ($linux || $bsd ? adhoc : false)
libs{ssl}: def{libssl}:     include = $windows

# Build options.
#
# Drop -DOPENSSL_PIC, -D{L|B}_ENDIAN, -DOPENSSLDIR, -DENGINESDIR, -DMODULESDIR
# and -DOPENSSL_BUILDING_OPENSSL as they are not used in the libssl source
# code nor in the libcrypto public headers.
#
# Note that upstream also passes -DNDEBUG. Let's omit it for now to enable
# assertions to gain some extra confidence that we didn't break anything while
# packaging.
#
# Also note that libssl doesn't use zlib and zstd directly. However, it may
# use functionality that libcrypto additionally provides when zlib and zstd
# are enabled.
#
c.poptions += -DZLIB -DZSTD

if $windows
  c.poptions += -DWIN32_LEAN_AND_MEAN -DUNICODE -D_UNICODE

switch $tclass, $tsys
{
  case 'linux'
    c.poptions += -DOPENSSL_USE_NODELETE

  case 'windows', 'mingw32'
    c.poptions += -D_MT

  case 'windows'
  {
    # Note that upstream also passes -DOPENSSL_USE_APPLINK if compiled with
    # VC. We drop this option (see libcrypto/buildfile) for details.
    #
    c.poptions += -DOPENSSL_SYS_WIN32 -D_CRT_SECURE_NO_DEPRECATE \
                  -D_WINSOCK_DEPRECATED_NO_WARNINGS
  }
}

switch $c.class
{
  case 'gcc'
  {
    if ($c.target.cpu == 'i686')
      c.coptions += -fomit-frame-pointer

    # Disable warnings that pop up with -Wall -Wextra. Upstream doesn't seem
    # to care about these and it is not easy to disable specific warnings in a
    # way that works across compilers/versions (some -Wno-* options are only
    # recognized in newer versions). There are still some warnings left that
    # appear for certain platforms/compilers. We pass them through but disable
    # treating them as errors.
    #
    c.coptions += -Wno-all -Wno-extra -Wno-error
  }
  case 'msvc'
  {
    # Disable warnings that pop up with /W3.
    #
    c.coptions += /wd4090 /wd4133 /wd4244 /wd4267 /wd4334
  }
}

c.poptions =+ "-I$src_base"

switch $tclass, $tsys
{
  case 'linux'
  {
    c.loptions += -Wl,-znodelete -Wl,-Bsymbolic               \
                  "-Wl,--version-script=$src_base/libssl.ld"

    c.libs += -ldl -pthread
  }
  case 'bsd'
  {
    c.loptions += -Wl,-Bsymbolic                              \
                  "-Wl,--version-script=$src_base/libssl.ld"

    c.libs += -pthread
  }
  case 'windows', 'mingw32'
  {
    # Note that for MinGW GCC the upstream package also passes -static-libgcc.
    # We normally don't link GCC run-time statically when packaging other C
    # libraries, so let's not do that here either and see how it goes.
    #
    c.loptions += -Wl,--enable-auto-image-base

    c.libs += -lws2_32 -lgdi32 -lcrypt32
  }
  case 'windows'
  {
    # Suppress the 'object file does not define any public symbols' warning.
    #
    c.aoptions += /IGNORE:4221

    c.libs += ws2_32.lib gdi32.lib crypt32.lib advapi32.lib
  }
}

# Export options.
#
lib{ssl}:
{
  cc.export.poptions = "-I$src_base"
  cc.export.libs = $int_libs
}

# See bootstrap.build for details.
#
if $version.pre_release
  lib{ssl}: bin.lib.version = @"-$version.project_id"
else
  lib{ssl}: bin.lib.version = @"-$abi_version"

# Note that all public headers are installed by libcrypto (see
# libcrypto/README-DEV for the reasoning).
#
h{*}: install = false
